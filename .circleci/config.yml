version: 2
jobs:
  build:
    docker:
      - image: kirisaki/klaraworks-build:0.2
    steps:
      - checkout
      - setup_remote_docker

      # node.js
      - restore_cache:
          name: Restore node_modules cache
          keys:
            - node_modules-{{ checksum "package.json" }}
      - run:
          name: Install node packages
          command: npm i
      - save_cache:
          name: Save .stack
          key: node_modules-{{ checksum "package.json" }}
          paths:
            - ./node_modules

      # elm
      - restore_cache:
          name: Restore .elm cache
          keys:
            - elm-{{ checksum "elm.json" }}
          paths:
            - ~/.elm

      # Haskell
      - restore_cache:
          name: Restore .stack cache
          keys:
            - stack-packages-{{ checksum "package.json" }}
      - run:
          name: Build server
          command: stack build
      - save-cache:
          name: Save .stack
          key: stack-packages-{{ checksum "package.yaml" }}
          paths:
            - ~/.stack
      - save_cache:
          name: Save .elm
          key: elm-{{ checksum "elm.json" }}
          paths:
            - ./node_modules

      # tests
      - run:
          name: Haskell test
          command: stack test

      # Build docker image
      - run:
          name: Setup common environment variables
          command: |
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Build image
          command: |
            docker build -t $FULL_IMAGE_NAME .
      - run:
          name: Save image to an archive
          command: |
            mkdir docker-image
            docker save -o docker-image/image.tar $FULL_IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - docker-image
  
  deploy:  
    docker:
      - image: circleci/python:3.6.1
    environment:
      AWS_DEFAULT_OUTPUT: json
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - restore_cache:
          key: venv
      - run:
          name: Install awscli
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install awscli
      - save_cache:
          key: venv
          paths:
          - "venv"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-image/image.tar
      - run:
          name: Push image
          command: |
            . venv/bin/activate
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CIRCLE_PROJECT_REPONAME:$CIRCLE_SHA1
      # - run:
      #     name: Deploy
      #     command: |
      #       . venv/bin/activate
            
      #       export revision=$(eval aws ecs register-task-definition \
      #       --requires-compatibilities EC2 --cpu 256 --memory 256 --network-mode awsvpc \
      #       --execution-role-arn arn:aws:iam::$AWS_ACCOUNT_ID:role/ecsTaskExecutionRole --container-definitions \
      #       '[\{\"name\":\"klaraworks-container\",\"image\":\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/klaraworks:${CIRCLE_SHA1}\",\"essential\":true,\"portMappings\":[\{\"containerPort\":80\}]\}]' \
      #       --family klaraworks-task | jq '.taskDefinition.taskDefinitionArn' --raw-output)

      #       aws ecs update-service --cluster klaraworks-cluster --service klara-web --task-definition $revision --force-new-deployment

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
